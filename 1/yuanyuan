#!/usr/bin/perl -w
#http://yuanyuan
#http://205.209.177.79/modules/article/articleinfo.php?id=249
#Sat Nov 28 12:05:13 2009
use strict;

#================================================================
# apply_rule will be called with ($RuleBase,%Rule),the result returned have these meaning:
# $r{base}          : Base url to build the full url
# $r{work_dir}      : Working directory (will be created if not exists)
# $r{data}          : Data array extracted from url,will be passed to $r{action}(see followed)
# $r{action}        : Command which the $r{data} will be piped to,can be overrided
# $r{pipeto}        : Same as action,Command which the $r{data} will be piped to,can be overrided
# $r{hook}          : Hook action,function process_data will be called
# $r{no_subdir}     : Do not create sub directories
# $r{pass_data}     : Data array which will be passed to next level of urlrule
# $r{pass_name}     : Names of each $r{pass_data}
# $r{pass_arg}      : Additional arguments to be passed to next level of urlrule
#================================================================
use HTML::TreeBuilder;
use MyPlace::HTML::Convertor;
sub apply_rule {
    my $rule_base= shift(@_);
    my %rule = %{shift(@_)};
    my %r;
    $r{base}=$rule_base;
    open FI,"-|","netcat \'$rule_base\' | gb2utf";
    my $tree = HTML::TreeBuilder->new();
    while(<FI>) {
        $tree->parse($_);
    }
    close FI;
    $tree->eof();
    my @elms = $tree->look_down("_tag","title");
    if(@elms) {
        my $title = $elms[0]->as_text;
        $title =~ s/\s*-[^-]+-[^-]+$//;
        $title =~ s/[\/\\]//g; 
        die("Invalid URL\n") unless($title);
        $r{work_dir}=$title;
    }
    else {
        die("Invalid URL\n");
    }
    @elms = $tree->look_down("id","content");
    die("Invalid URL\n") unless(@elms);
    $r{file} = "0.about.txt";
    $r{data} = text_from_node($elms[0]);
    @elms = $elms[0]->look_down("_tag","a");
    my $index;
    foreach(@elms) {
        if($_->attr("href") =~ /index\.html$/) {
            $index = $_->attr("href");
            last;
        }
    }
    $tree->delete();
    if($index) {
        $r{base} = build_url($r{base},$index);
        open FI,"-|","netcat \'$index\' | gb2utf";
        $tree = HTML::TreeBuilder->new();
        while(<FI>) {
            $tree->parse($_);
        }
        close FI;
        $tree->eof();
        @elms = $tree->look_down("_tag","a");
        my $idx = 0;
        my $maxzero = length($#elms+1) +1;
        $r{file} = "0"x$maxzero . ".about.txt";
        foreach(@elms) {
            if($_->attr("href") =~ /\.html$/) {
                $idx++;
                push @{$r{pass_data}},$_->attr("href");
                push @{$r{pass_arg}},"0"x($maxzero-length($idx)) . "$idx." . $_->as_text();
            }
        }
        $tree->delete();
        $r{pass_domain} = "yuanyuan";
        $r{no_subdir}=1;
    }
    return %r;
}
1;

#!/usr/bin/perl -w
#DOMAIN : xhamster.one
#AUTHOR : eotect <eotect@MYPLACE>
#CREATED: 2019-02-01 03:14
#UPDATED: 2019-02-01 03:14
#TARGET : https://xhamster.one/videos/spyfam-step-mom-christiana-cinn-fucks-big-dick-step-son-7731170
#URLRULE: 2.0
package MyPlace::URLRule::Rule::1_xhamster_one;
use base 'MyPlace::URLRule::Rule';
use strict;
use warnings;

=method1
sub apply_rule {
	my $self = shift;
	return $self->apply_quick(
	   'data_exp'=>undef,
	   'data_map'=>undef,
       'pass_exp'=>undef,
       'pass_map'=>undef,
       'pass_name_map'=>undef,
       'pages_exp'=>undef,
       'pages_map'=>undef,
       'pages_pre'=>undef,
       'pages_suf'=>undef,
       'pages_start'=>undef,
	   'pages_limit'=>undef,
       'title_exp'=>undef,
       'title_map'=>undef,
       'charset'=>undef
	);
}
=cut

use MyPlace::URLRule::Utils qw/get_url create_title url_getname/;

sub apply_rule {
	my $self = shift;
    my ($url,$rule) = @_;
	my $html = get_url($url,'-v');
    my @pass_data;
	my @html = split(/\n/,$html);
	foreach(@html) {
		while(m/href="([^"]*\/videos\/[^"]+)"[^>]+data/g) {
			my $v = $1;
			my $t = url_getname($v);
			push @pass_data,"urlrule:$v\t$t.mp4";
		}
	}
    return (
        count=>scalar(@pass_data),
        data=>\@pass_data,
        base=>$url,
    );
}

return new MyPlace::URLRule::Rule::1_xhamster_one;
1;

__END__

#       vim:filetype=perl



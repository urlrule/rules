#!/usr/bin/perl -w
#DOMAIN : megatube.xxx
#AUTHOR : xiaoranzzz <xiaoranzzz@MYPLACE>
#CREATED: 2019-01-29 02:04
#UPDATED: 2019-01-29 02:04
#TARGET : https://www.megatube.xxx
#URLRULE: 2.0
package MyPlace::URLRule::Rule::0_megatube_xxx;
use base 'MyPlace::URLRule::Rule';
use strict;
use warnings;

=method1
sub apply_rule {
	my $self = shift;
	return $self->apply_quick(
	   'data_exp'=>undef,
	   'data_map'=>undef,
       'pass_exp'=>undef,
       'pass_map'=>undef,
       'pass_name_map'=>undef,
       'pages_exp'=>undef,
       'pages_map'=>undef,
       'pages_pre'=>undef,
       'pages_suf'=>undef,
       'pages_start'=>undef,
	   'pages_limit'=>undef,
       'title_exp'=>undef,
       'title_map'=>undef,
       'charset'=>undef
	);
}
=cut

use MyPlace::URLRule::Utils qw/get_url create_title/;

sub apply_rule {
	my $self = shift;
    my ($url,$rule) = @_;
	my $html = get_url($url,'-v');
    my $title = undef;
    my @data;
    my @pass_data;
    my @html = split(/\n/,$html);
	my %info;
	foreach(@html) {
		if(m/video_url: '([^']+\/)([^\/']+)(\/?)/) {
			$info{video} = "$1$2$3";
			$info{filename} = $2;
			last;
		}
	}
	return (error=>"Error parsing page") unless($info{video});
	$info{title} = $url;
	$info{title} =~ s/\/+$//;
	$info{title} =~ s/.*\///;
	$info{title} = create_title($info{title});
	push @data,"$info{video}\t$info{title}_$info{filename}";

    return (
        count=>scalar(@data),
        data=>\@data,
        base=>$url,
    );
}

return new MyPlace::URLRule::Rule::0_megatube_xxx;
1;

__END__

#       vim:filetype=perl



#!/usr/bin/perl -w
#DOMAIN : ffem.club
#AUTHOR : Eotect Nahn <eotect@myplace>
#CREATED: 2020-09-19 21:09
#UPDATED: 2020-09-19 21:09
#TARGET : ___TARGET___
#URLRULE: 2.0
package MyPlace::URLRule::Rule::___ID___;
use base 'MyPlace::URLRule::Rule';
use strict;
use warnings;

=method1

sub apply_rule {
	my $self = shift;
	return $self->apply_quick(
	   'data_exp'=>undef,
	   'data_map'=>undef,
       'pass_exp'=>undef,
       'pass_map'=>undef,
       'pass_name_map'=>undef,
       'pages_exp'=>undef,
       'pages_map'=>undef,
       'pages_pre'=>undef,
       'pages_suf'=>undef,
       'pages_start'=>undef,
	   'pages_limit'=>undef,
       'title_exp'=>undef,
       'title_map'=>undef,
       'charset'=>undef
	);
}

=cut

use MyPlace::WWW::Utils qw/get_url get_safename url_getname post_url/;
use MyPlace::JSON qw/decode_json/;

sub apply_rule {
	my $self = shift;
    my ($url,$rule) = @_;
	my $opts = $rule->{options} ? $rule->{options} : {};
	my $title = $url;
	if($opts->{filename}) {
		$title = $opts->{filename};
		$title = $title . $opts->{ext} if($opts->{ext});
	}
	else {
		$title =~ s/.*#//;
		$title =~ s/.*\///;
		$title = $title . ".mp4";
	}
	my $rurl = $url;
	$rurl =~ s/\/v\//\/api\/source\//;
    my @data;
    my @pass_data;
	my $html = post_url($rurl,'r=&d=www.ffem.club');
	my $info = decode_json($html);
	if($info->{success} && $info->{data}) {
		foreach(reverse @{$info->{data}}) {
			push @data,$_->{file} . "\t" . $title;
		}
	}
    #my @html = split(/\n/,$html);
    return (
        base=>$url,
        count=>scalar(@data),
        data=>\@data,
        title=>undef,
    );
}

return new MyPlace::URLRule::Rule::___ID___;
1;

__END__

#       vim:filetype=perl




#!/usr/bin/perl -w
#DOMAIN : xhamster.sex
#AUTHOR : Eotect Nahn <eotect@myplace>
#CREATED: 2021-03-07 00:09
#UPDATED: 2021-03-07 00:09
#TARGET : ___TARGET___
#URLRULE: 2.0
package MyPlace::URLRule::Rule::___ID___;
use base 'MyPlace::URLRule::Rule';
use strict;
use warnings;

=method1
sub apply_rule {
	my $self = shift;
	return $self->apply_quick(
	   'data_exp'=>undef,
	   'data_map'=>undef,
       'pass_exp'=>undef,
       'pass_map'=>undef,
       'pass_name_map'=>undef,
       'pages_exp'=>undef,
       'pages_map'=>undef,
       'pages_pre'=>undef,
       'pages_suf'=>undef,
       'pages_start'=>undef,
	   'pages_limit'=>undef,
       'title_exp'=>undef,
       'title_map'=>undef,
       'charset'=>undef
	);
}
=cut

use MyPlace::WWW::Utils qw/get_url get_safename url_getname new_url_data/;

sub apply_rule {
	my $self = shift;
    my ($url,$rule) = @_;
	my $opts = $rule->{options} ? $rule->{options} : {};
	my $html = get_url($url,'-v');
    my @data;
    my @pass_data;
    #my @html = split(/\n/,$html);
	my %info;
	while($html =~ m/property\s*=\s*"([^"]+)"[^>]+content\s*=\s*"([^"]+)/g) {
		my $n = $1;
		my $url = $2;
		$url =~ s/^.+http/http/;
		$info{$n} = $url;
	}
	while($html =~ m/(video_url|video_alt_url|preview_url)\s*:\s*'([^']+)/g) {
		my $n = $1;
		my $url = $2;
		$url =~ s/^.+http/http/;
		$info{$n} = $url;
	}
	my $big = 0;
	while($html =~ m/<a[^>]+href="([^"]+download[^"]+)/g) {
		my $url = $1;
		if($url =~ m/(\d+)p\.mp4/) {
			if($1 > $big) {
				$info{download} = $url;
			}
		}
		else {
			$info{download} = $url;
		}
	}
	my $video;
	foreach(qw/download video_alt_url video_url ya:ovs:content_url/) {
		if($info{$_}) {
			$video = $info{$_};
			last;
		}
	}
	return (error=>"Error parsing page") unless($video);
	my $image;
	foreach(qw/preview_url og:image/) {
		$image = $info{$_} if($info{$_});
	}
	my $title = url_getname($url);
	$title = get_safename($title);

	push @data,$video . "\t" . $title . ".mp4";
	push @data,$image . "\t" . $title . ".jpg" if($image);

    return (
        base=>$url,
        count=>scalar(@data),
        data=>\@data,
        pass_count=>scalar(@pass_data),
        pass_data=>\@pass_data,
        title=>undef,
    );
}

return new MyPlace::URLRule::Rule::___ID___;
1;

__END__

#       vim:filetype=perl




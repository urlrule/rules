#!/usr/bin/perl -w
#http://www.88dy.tv/view/index359.html
#Mon Oct  7 07:01:54 2013
use strict;
no warnings 'redefine';


=method1
sub apply_rule {
 return (
       '#use quick parse'=>1,
       'data_exp'=>undef,
       'data_map'=>undef,
       'pass_exp'=>undef,
       'pass_map'=>undef,
       'pass_name_map'=>undef,
       'pages_exp'=>undef,
       'pages_map'=>undef,
       'pages_pre'=>undef,
       'pages_suf'=>undef,
       'pages_start'=>undef,
       'title_exp'=>undef,
       'title_map'=>undef,
       'charset'=>undef
 );
}
=cut

use MyPlace::URLRule::Utils qw/get_url/;
use Encode qw/find_encoding/;
my $gbk = find_encoding('gbk');
my $utf8 = find_encoding('utf8');
sub apply_rule {
    my ($url,$rule) = @_;
	my $site;
	my $id;
	if($url =~ m/^(.+)\/[^\/]+\/[^\/]*?(\d+)\.html.*$/) {
		$site = $1;
		$id = $2;
	}
	else {
		return (
			'error'=>"Invalid url: $url",
		)
	}
	my $url2 = "$site/player/index$id.html";
	my $html = get_url($url2,'-v');
	if(!$html) {
		return (
			'error'=>"Failed restriving $url2",
		)
	}
    my $title = undef;
    my @data;
    my @pass_data;
	my $url3;
    my @html = split(/\n/,$utf8->encode($gbk->decode($html)));
	foreach(@html) {
#		<script type="text/javascript" src="/playdata/103/359.js?3287.348"></script><script>var param=getHtmlParas('.html');viewplay(param[0],param[1])</script>
		if(m/src="(\/playdata\/[^"]+)/) {
			$url3 = "$site$1";
		}
		elsif(m/<\/span>\s*([^<]+?)\s*<\/h1>/) {
			$title = $1;
		}
	}
	$html = get_url($url3,'-v');
	if(!$html) {
		return (
			'error'=>"Failed retriving $url3",
		)
	}
	$html = $utf8->encode($gbk->decode($html));
	$html =~ s/\\u(....)/\\x{$1}/g;
	$html =~ s/%7C/|/g;
	my @qvod;
	while($html =~ m/'([^']+)\$(qvod:\/\/[^']+)\|([^\|]+)\|\$qvod'/g) {
		my $name = $utf8->encode(eval("\"$1\""));
		my $qvod = $2;
		my $filename = $utf8->encode(eval("\"$3\""));
#		$qvod =~ s/\\u(....)/\x{$1}/g;
#		$name =~ s/\\u(....)/\x{$1}/g;
		push @qvod,[$qvod,$name,$filename];		
	}
	my $count = @qvod;
	if($count > 1) {
		foreach(@qvod) {
			push @data,"$_->[0]|${title}_$_->[1]_$_->[2]|";
		}
	}
	else {
		@data = ("$qvod[0]->[0]|${title}_$qvod[0]->[2]|");
	}
    return (
        count=>scalar(@data),
        data=>\@data,
        pass_count=>0,
    );
}

=cut

1;

__END__

#       vim:filetype=perl

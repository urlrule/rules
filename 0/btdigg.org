#!/usr/bin/perl -w

#DOMAIN : btdigg.org
#AUTHOR : eotect <eotect@myplace>
#CREATED: 2015-11-26 01:12
#UPDATED: 2015-11-26 01:12
#TARGET : ___TARGET___

use strict;
no warnings 'redefine';

=method1
sub apply_rule {
 return (
 #Set quick parsing method on
       '#use quick parse'=>1,

#Specify data mining method
       'data_exp'=>'<td class="torrent_name"><a[^>]+>([^<]+)<\/a>.*?href="(magnet:[^"]+)"',
       'data_map'=>'$2 . "\t" . $1',

#Specify data mining method for nextlevel
       'pass_exp'=>undef,
       'pass_map'=>undef,
       'pass_name_map'=>undef,

#Specify pages mining method
       'pages_exp'=>undef,
       'pages_map'=>undef,
       'pages_pre'=>undef,
       'pages_suf'=>undef,
       'pages_start'=>undef,
	   'pages_limit'=>undef,

       'title_exp'=>undef,
       'title_map'=>undef,
       'charset'=>undef
 );
}
=cut

use MyPlace::URLRule::Utils qw/get_url/;

sub apply_rule {
    my ($url,$rule) = @_;
	my $html = get_url($url,'-v');
    my @data;
    while($html =~ m/<td class="torrent_name"><a[^>]+>([^<]+)<\/a>.*?href="(magnet:[^"]+)"/g) {
		my $mu = $2;
		my $ti = $1;
		$mu =~ s/(?:&amp;|&)dn=([^&]+)/&dn=$ti/;
		push @data,$mu . "\t" . $ti;
	}
    return (
        count=>scalar(@data),
        data=>\@data,
        base=>$url,
    );
}

=cut

1;

__END__

#       vim:filetype=perl




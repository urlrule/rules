#!/usr/bin/perl -w
#DOMAIN : pornomilf.club
#AUTHOR : eotect <eotect@MyPlace>
#CREATED: 2021-02-23 03:05
#UPDATED: 2021-02-23 03:05
#TARGET : https://pornomilf.club/897-polozhil-ruku-mamy-na-svoj-chlen-kogda-smotreli-film.html
#URLRULE: 2.0
package MyPlace::URLRule::Rule::0_pornomilf_club;
use base 'MyPlace::URLRule::Rule';
use strict;
use warnings;

=method1
sub apply_rule {
	my $self = shift;
	return $self->apply_quick(
	   'data_exp'=>undef,
	   'data_map'=>undef,
       'pass_exp'=>undef,
       'pass_map'=>undef,
       'pass_name_map'=>undef,
       'pages_exp'=>undef,
       'pages_map'=>undef,
       'pages_pre'=>undef,
       'pages_suf'=>undef,
       'pages_start'=>undef,
	   'pages_limit'=>undef,
       'title_exp'=>undef,
       'title_map'=>undef,
       'charset'=>undef
	);
}
=cut

use MyPlace::WWW::Utils qw/get_url get_safename url_getname/;

sub apply_rule {
	my $self = shift;
    my ($url,$rule) = @_;
	my $opts = $rule->{options} ? $rule->{options} : {};
	my $html = get_url($url,'-v');
    my @data;
    my @pass_data;
    #my @html = split(/\n/,$html);
	my %info = (title=>url_getname($url));
	$info{title} =~ s/\.[^\.]+$//;
	if($info{title} =~ m/^\d+[_-]*(.+)/) {
		$info{title} = $1;
	}
	if($html =~ m/<iframe[^>]+src="([^"]+)"/) {
		$info{iframe} = $1;
	}
	else {
		return (error=>"Error parsing page");
	}
	$html = get_url($info{iframe},'-v','--referer',$url);
	if($html =~ m/"file"\s*:\s*"([^"]+)"/) {
		$info{file} = $1;
	}
	else {
		return (error=>"Error parsing page");
	}
	if($html =~ m/"poster"\s*:\s*"([^"]+)"/) {
		$info{poster} = $1;
	}
	foreach(split(/\s+or\s+/,$info{file})) {
		s/^\[[^\]]+\]//;
		s/^\/\//https:\/\//;
		push @{$info{videos}},$_;
		if(m/\.m3u8/) {
			$info{video} = $_;
		}
	}
	$info{video} = $info{videos}->[0] unless($info{video});
	if(!$info{video}) {
		return (error=>"Error no video found");
	}
	push @data,$info{video} . "\t" . $info{title} . ".mp4";
	push @data,$info{poster} . "\t" . $info{title} . ".jpg" if($info{poster});
    return (
        base=>$url,
        count=>scalar(@data),
        data=>\@data,
        pass_count=>scalar(@pass_data),
        pass_data=>\@pass_data,
        title=>undef,
    );
}

return new MyPlace::URLRule::Rule::0_pornomilf_club;
1;

__END__

#       vim:filetype=perl



#!/usr/bin/perl -w
#weipai.cn
#Wed Nov 20 01:02:45 2013
use strict;
no warnings 'redefine';
use utf8;

#http://www.weipai.cn/user/moreOwnVideos/uid/52648e589f6c00cd1a8fde4e?page=1

use MyPlace::URLRule::Utils qw/get_url get_html/;
use MyPlace::String::Utils qw/no_empty/;
use JSON qw//;
use Encode qw/find_encoding/;
my $utf8 = find_encoding('utf8');

my $JS;
sub decode_json1 {
	if(!$JS)  {
		$JS = JSON->new();
		$JS->relaxed;
	}
	return $JS->decode(@_);
}

sub extract_video {
	my @html = split("\n","@_");
	my %info = (
		video=>'',
		user=>'',
		year=>'',
		month=>'',
		day=>'',
		hour=>'',
		minute=>'',
		second=>'',
		title=>'',
		length=>'',
		error=>'',
		big_title=>'',
	);
	foreach(@html) {
		#print STDERR "LINE:$_\n\n";
		if((!$info{user}) && m/<div class="user"><[^>]*title="([^"]+)/) {
			$info{user}=$1;
		}
		if((!$info{day}) && m/<span class="day">(\d+)/) {
			$info{day}=$1;
		}
		if((!$info{year}) && m/<span class="date">.*?>(\d+)-(\d+)/) {
			$info{year} = $1;
			$info{month} = $2;
		}
		if((!$info{length}) && m/<span class="length">(\d+)'(\d+)"/) {
			$info{length} = $1 eq "0" ? "$2s" : "$1m$2s";
		}
		if((!$info{title}) && m/<span class="(?:video_title|desc)">(.+)<\/span/) {
			$info{title} = extract_title($1);
		}
		if((!$info{minute}) && m/<span class="video_detail">(\d+)月(\d+)日\s+(\d+):(\d+)/) {
			$info{month} = $1;
			$info{day} = $2;
			$info{minute} = $4;
			$info{hour} = $3;
		}
		if((!$info{video})) {
			if(m/<img[^>]*src="(http:\/\/(?:v|aliv)\.weipai\.cn\/[^"]+)/) {
				$info{cover} = $1;
				$info{video} = $info{cover}; 
				$info{video} =~ s/\.([^\/]+)$//g;
			}
			elsif(m/pic:"([^"]+\.jpg)"/) {
				$info{cover} = $1;
				$info{video} = $info{cover}; 
				$info{video} =~ s/\.([^\/]+)$//g;
			}
		}
		if((!$info{error}) && m/<div class="tab selected">出错啦<span class="end">/) {
			$info{error} = 1;
		}
		if((!$info{big_title}) && m/<div class=box_big_title>([^<]+)/) {
			$info{big_title} = $1;
		}
		else {
			#print STDERR "LINE MATCH NOTHING:$_\n";
		}
	}
	if($info{error}) {
		return ();
	}
	elsif(!$info{video}) {
		return ();
	}
	else {
		return build_data(%info);
	}
}

sub extract_title {
	my $title = shift;
	return "" unless($title);
	$title =~ s/<[^.>]+>//g;
	$title =~ s/\/\?\*'"//g;
	$title =~ s/&amp;amp;/&/g;
	$title =~ s/&amp;/&/g;
	$title =~ s/&hellip;/…/g;
#	$title =~ s/\x{1f60f}|\x{1f614}|\x{1f604}//g;
#	$title =~ s/[\P{Print}]+//g;
	$title =~ s/[\p{Emoticons}]//g;
	my $maxlen = 126;
	if(length($title) > $maxlen) {
		$title = substr($title,0,$maxlen);
	}	
	return $utf8->encode($title);
}

sub build_data {
	my %info = @_;
		if(!$info{title}) {
			$info{title} = $info{video};
			$info{title} =~ s/^.*[\/\\]//;
		}
		#	use Data::Dumper;print STDERR Dumper(\%info);
		my $filename = "$info{year}$info{month}$info{day}$info{hour}$info{minute}" .
			no_empty($info{title},"_") . no_empty($info{length},"[","]");
		$filename =~ s/[:\/\\]+/_/g;
		$filename =~ s/[*?!]+//g;
		my $ext = ".mov";
		#$info{cover} . ".mov.3in1.jpg" . "\t" . $filename . ".3in1.jpg",
		return $info{video} . $ext . "\t" . $filename . $ext,
			   $info{cover} . "\t" . $filename . ".jpg";
}


sub apply_rule_video {
    my ($url,$rule) = @_;
	my $html = $utf8->encode(get_html($url,'-v'));
	
    my $title = undef;
    my @data;
    my @pass_data;
    my @html = split(/<\/div><div id="/,$html);
	foreach my $block (@html) {
		foreach my $url (extract_video($block)) {
			push @data,$url if($url);
		}
	}
	return (
		count=>scalar(@data),
		data=>\@data,
		base=>$url
	);
}

sub extract_video_list {
	my $vlist = shift;
	return unless($vlist and @$vlist);
	my @data;
	foreach my $video (@$vlist) {
		$video->{cover} = $video->{video_screenshot} || $video->{video_screenshots};
		$video->{cover} =~ s/\/+ppp\/+video\/+/\/video\//g;
		$video->{cover} =~ s/\.s\.\d+\.jpg$/.jpg/;
		$video->{video} = $video->{cover};
		$video->{video} =~ s/\.([^\/]+)$//;
		$video->{title} = extract_title($video->{video_intro} || $video->{video_desc});
		if($video->{cover} =~ m/\/(\d\d\d\d)(\d\d)\/(\d\d)\/(\d+)\//) {
			@{$video}{qw/year month day hour minute/} = ($1,$2,$3,$4,'');
		}
		#use Data::Dumper;print Data::Dumper->Dump([$video],['$video']);
		push @data,build_data(%$video);
	}
	return @data;
}

sub apply_rule_video_json {
	my ($url,$rule) = @_;
	my $json = decode_json1(get_url($url,'-v'));
	my @data = extract_video_list($json->{video_list});
	return (
		count=>scalar(@data),
		data=>\@data,
		base=>$url,
		info=>$json,
	);
}

sub apply_rule {
	my($url,$rule) = @_;
	if($url =~ m/weipai\.cn\/video\/([^\?\_\&\#\/]+)/) {
		return apply_rule_video_json('http://w1.weipai.cn/user_video_list?blog_id=' . $1,$rule,@_);
	}
	elsif($url =~ m/weipai\.cn\/video/) {
		return apply_rule_video($url,$rule,@_);
	}
	elsif($url =~ m/user_video_list\?/) {
		return apply_rule_video_json($url,$rule,@_);
	}
	elsif($url =~ m/\/review\/video/) {
		#http://www.weipai.cn/review/video?uid=508775398134943b58000051&os=android
		my @data;
		my $html = get_url($url,'-v');
		while($html =~ m/"id":"([^"]+)"\s*,\s*"poster":"([^"]+)"\s*,\s*"url":"([^"]+)"/g) {
			my ($id,$poster,$url) = ($1,$2,$3);
			$poster =~ s/\\\//\//g;
			$url =~ s/\\\//\//g;
			$url =~ s/\.m3u8$/\/500k\.mp4/;
			my $videoid = $poster;
			$videoid =~ s/^.*\///;
			$videoid =~ s/\..*$//;
			my $videoext = $url;
			$videoext =~ s/^.*\.([^\.]+)$/.$1/;
			push @data,"$poster\t$id\_$videoid.jpg","$url\t$id\_$videoid$videoext";
		}
		return (
			count=>scalar(@data),
			data=>\@data,
			title=>'#ToReview',
		);
	}
	my %r;

	my $info = decode_json1(get_url($url,'-v'));

	my $uid = $info->{user_id};
	if($info->{next_cursor}) {
		$r{level} = 0;
		$r{pass_data} = [
			join("&",(
				 'http://w1.weipai.cn/home_user?day_count=7&relative=after',
				 "user_id=$uid",
				 "cursor=" . $info->{next_cursor}
				)
			)
		];
		$r{pass_count} = 1;
	}
	if($info->{"diary_list"}) {
		my $count = 0;
		my @data;
		foreach(@{$info->{"diary_list"}}) {
			if($_->{video_list}) {
				push @data,extract_video_list($_->{video_list});

			}
		}
		$r{count} = scalar(@data);
		$r{data} = \@data;
		$r{info} = $info;
	}
	return %r;
}


1;

__END__

#       vim:filetype=perl

#!/usr/bin/perl -w
#DOMAIN : xhamster.one
#AUTHOR : xiaoranzzz <xiaoranzzz@MYPLACE>
#CREATED: 2019-02-01 03:14
#UPDATED: 2019-02-01 03:14
#TARGET : https://xhamster.one/videos/spyfam-step-mom-christiana-cinn-fucks-big-dick-step-son-7731170
#URLRULE: 2.0
package MyPlace::URLRule::Rule::0_xhamster_one;
use base 'MyPlace::URLRule::Rule';
use strict;
use warnings;

=method1
sub apply_rule {
	my $self = shift;
	return $self->apply_quick(
	   'data_exp'=>undef,
	   'data_map'=>undef,
       'pass_exp'=>undef,
       'pass_map'=>undef,
       'pass_name_map'=>undef,
       'pages_exp'=>undef,
       'pages_map'=>undef,
       'pages_pre'=>undef,
       'pages_suf'=>undef,
       'pages_start'=>undef,
	   'pages_limit'=>undef,
       'title_exp'=>undef,
       'title_map'=>undef,
       'charset'=>undef
	);
}
=cut

use MyPlace::URLRule::Utils qw/get_url get_safename url_getname/;

sub apply_rule {
	my $self = shift;
    my ($url,$rule) = @_;
	my $html = get_url($url,'-v');
    my @pass_data;
	my ($pre,$last,$suf) = ("",0,"");
	foreach(split(/\n/,$html)) {
		if(m/href="([^"]+?)(\d+)"[^>]+data-page=/) {
			#print STDERR "$_\n";
			#print "last:$last, \$2: $2\n";
			if($2>$last) {
				$last = $2;
				$pre = $1;
				$suf = "";
			}
		}
	}
	if($last > 200) {
		return ("error"=>"Too much page [$last] return, something maybe wrong");
	}
	push @pass_data,$url;
	$pre =~ s/&#x3D;/=/g;
	$pre =~ s/&amp;/&/g;
	$suf =~ s/&#x3D;/=/g;
	$suf =~ s/&amp;/&/g;
	foreach(2 .. $last) {
		push @pass_data,$pre . $_ . $suf;
	}
	my $title;
	if($url =~ m/[&\?][sq]=([^&]+)/) {
		$title = get_safename($1);
	}
	else {
		$title = url_getname($url);
	}
	$title =~ s/[-_\+]/ /g;
	$title =~ s/\s+/ /g;
	$title =~ s/\b(\w)/\U$1/g;
    return (
        pass_count=>scalar(@pass_data),
        pass_data=>\@pass_data,
        base=>$url,
		#	title=>$title,
    );
}

return new MyPlace::URLRule::Rule::0_xhamster_one;
1;

__END__

#       vim:filetype=perl



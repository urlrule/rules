#!/usr/bin/perl -w
#DOMAIN : adv.d8swe.xyz
#AUTHOR : xiaoranzzz <xiaoranzzz@MYPLACE>
#CREATED: 2020-02-12 01:12
#UPDATED: 2020-02-12 01:12
#TARGET : http://adv.d8swe.xyz/v/original 1
#URLRULE: 2.0
package MyPlace::URLRule::Rule::2_adv_d8swe_xyz;
use base 'MyPlace::URLRule::Rule';
use strict;
use warnings;

=method1
sub apply_rule {
	my $self = shift;
	return $self->apply_quick(
	   'data_exp'=>undef,
	   'data_map'=>undef,
       'pass_exp'=>undef,
       'pass_map'=>undef,
       'pass_name_map'=>undef,
       'pages_exp'=>undef,
       'pages_map'=>undef,
       'pages_pre'=>undef,
       'pages_suf'=>undef,
       'pages_start'=>undef,
	   'pages_limit'=>undef,
       'title_exp'=>undef,
       'title_map'=>undef,
       'charset'=>undef
	);
}
=cut

use MyPlace::WWW::Utils qw/get_url get_safename url_getname/;
sub apply_rule {
	my $self = shift;
    my ($url,$rule) = @_;
	my $html = get_url($url,'-v');
    my $title = undef;
    my @data;
    my @pass_data;
	my %info;
	$info{host} = $url;
	$info{host} =~ s/^([^\/]+:\/\/[^\/]+)\/.*$/$1/;
	use JSON;
	my $js = JSON->new();
	$html =~ s/[\r\n]+//g;
	my $data;
	if($html =~ m/xvideoData.paginator\s*=\s*\{(.+?)\}\s*;\s*xvideoData./) {
		$data = $js->decode('{' . $1 . '}');
	}
	return (error=>"Error parsing page") unless(ref $data);
	$self->get_print($data->{last_page},"last_page",\%info);
	$self->get_print($data->{next_page_url},"next_page_url",\%info);
	push @pass_data,$url;
	if($info{next_page_url})  {
		my $curr = $info{next_page_url};
		if($curr =~ m/[\?&]page=(\d+)/) {
			$curr = $1;
		}
		my $base = $url;
		$base =~ s/\?page=\d+/\?/;
		$base =~ s/&page=\d+(.*)$/$1&/;
		if($info{last_page}) {	
			$info{last_page} = 20 if($info{last_page}>20);
			while($curr <= $info{last_page}) {
				push @pass_data,$base . "page=" . $curr;
				$curr ++;
			}
		}
		else {
			push @pass_data,$info{next_page_url};
		}
	}
    return (
        count=>scalar(@data),
        data=>\@data,
        pass_count=>scalar(@pass_data),
        pass_data=>\@pass_data,
        base=>$url,
        title=>$title,
    );
}

return new MyPlace::URLRule::Rule::2_adv_d8swe_xyz;
1;

__END__

#       vim:filetype=perl


